/* tslint:disable */
/* eslint-disable */
/**
 * Glyphd: GPU Market API
 * API service exposing enriched GPU listingsmodel metadata, scoring reports, and insight overlays from the glyphsieve pipeline.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { SchemaVersion } from './SchemaVersion';
import {
    SchemaVersionFromJSON,
    SchemaVersionFromJSONTyped,
    SchemaVersionToJSON,
    SchemaVersionToJSONTyped,
} from './SchemaVersion';
import type { ImportSummaryStatsDTO } from './ImportSummaryStatsDTO';
import {
    ImportSummaryStatsDTOFromJSON,
    ImportSummaryStatsDTOFromJSONTyped,
    ImportSummaryStatsDTOToJSON,
    ImportSummaryStatsDTOToJSONTyped,
} from './ImportSummaryStatsDTO';
import type { RowErrorDTO } from './RowErrorDTO';
import {
    RowErrorDTOFromJSON,
    RowErrorDTOFromJSONTyped,
    RowErrorDTOToJSON,
    RowErrorDTOToJSONTyped,
} from './RowErrorDTO';

/**
 * Data Transfer Object for import operation results.
 * 
 * Represents the result of an import operation with metadata and error reporting.
 * @export
 * @interface ImportResultDTO
 */
export interface ImportResultDTO {
    /**
     * Unique identifier for the import batch
     * @type {string}
     * @memberof ImportResultDTO
     */
    importId: string;
    /**
     * Number of records imported
     * @type {number}
     * @memberof ImportResultDTO
     */
    recordCount: number;
    /**
     * First model name in the imported batch
     * @type {string}
     * @memberof ImportResultDTO
     */
    firstModel: string;
    /**
     * Last model name in the imported batch
     * @type {string}
     * @memberof ImportResultDTO
     */
    lastModel: string;
    /**
     * Timestamp when the import was completed
     * @type {Date}
     * @memberof ImportResultDTO
     */
    timestamp: Date;
    /**
     * 
     * @type {Array<RowErrorDTO>}
     * @memberof ImportResultDTO
     */
    rowsWithErrors?: Array<RowErrorDTO> | null;
    /**
     * 
     * @type {ImportSummaryStatsDTO}
     * @memberof ImportResultDTO
     */
    summaryStats?: ImportSummaryStatsDTO | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ImportResultDTO
     */
    validationErrors?: Array<string> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ImportResultDTO
     */
    warnings?: Array<string> | null;
    /**
     * 
     * @type {string}
     * @memberof ImportResultDTO
     */
    filename?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ImportResultDTO
     */
    totalRows?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ImportResultDTO
     */
    validRows?: number | null;
    /**
     * 
     * @type {number}
     * @memberof ImportResultDTO
     */
    invalidRows?: number | null;
    /**
     * 
     * @type {Array<any>}
     * @memberof ImportResultDTO
     */
    scoreRange?: Array<any> | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof ImportResultDTO
     */
    topModels?: Array<string> | null;
    /**
     * API schema version for this response
     * @type {SchemaVersion}
     * @memberof ImportResultDTO
     */
    schemaVersion?: SchemaVersion;
}



/**
 * Check if a given object implements the ImportResultDTO interface.
 */
export function instanceOfImportResultDTO(value: object): value is ImportResultDTO {
    if (!('importId' in value) || value['importId'] === undefined) return false;
    if (!('recordCount' in value) || value['recordCount'] === undefined) return false;
    if (!('firstModel' in value) || value['firstModel'] === undefined) return false;
    if (!('lastModel' in value) || value['lastModel'] === undefined) return false;
    if (!('timestamp' in value) || value['timestamp'] === undefined) return false;
    return true;
}

export function ImportResultDTOFromJSON(json: any): ImportResultDTO {
    return ImportResultDTOFromJSONTyped(json, false);
}

export function ImportResultDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): ImportResultDTO {
    if (json == null) {
        return json;
    }
    return {
        
        'importId': json['import_id'],
        'recordCount': json['record_count'],
        'firstModel': json['first_model'],
        'lastModel': json['last_model'],
        'timestamp': (new Date(json['timestamp'])),
        'rowsWithErrors': json['rows_with_errors'] == null ? undefined : ((json['rows_with_errors'] as Array<any>).map(RowErrorDTOFromJSON)),
        'summaryStats': json['summary_stats'] == null ? undefined : ImportSummaryStatsDTOFromJSON(json['summary_stats']),
        'validationErrors': json['validation_errors'] == null ? undefined : json['validation_errors'],
        'warnings': json['warnings'] == null ? undefined : json['warnings'],
        'filename': json['filename'] == null ? undefined : json['filename'],
        'totalRows': json['total_rows'] == null ? undefined : json['total_rows'],
        'validRows': json['valid_rows'] == null ? undefined : json['valid_rows'],
        'invalidRows': json['invalid_rows'] == null ? undefined : json['invalid_rows'],
        'scoreRange': json['score_range'] == null ? undefined : json['score_range'],
        'topModels': json['top_models'] == null ? undefined : json['top_models'],
        'schemaVersion': json['schema_version'] == null ? undefined : SchemaVersionFromJSON(json['schema_version']),
    };
}

export function ImportResultDTOToJSON(json: any): ImportResultDTO {
    return ImportResultDTOToJSONTyped(json, false);
}

export function ImportResultDTOToJSONTyped(value?: ImportResultDTO | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'import_id': value['importId'],
        'record_count': value['recordCount'],
        'first_model': value['firstModel'],
        'last_model': value['lastModel'],
        'timestamp': ((value['timestamp']).toISOString()),
        'rows_with_errors': value['rowsWithErrors'] == null ? undefined : ((value['rowsWithErrors'] as Array<any>).map(RowErrorDTOToJSON)),
        'summary_stats': ImportSummaryStatsDTOToJSON(value['summaryStats']),
        'validation_errors': value['validationErrors'],
        'warnings': value['warnings'],
        'filename': value['filename'],
        'total_rows': value['totalRows'],
        'valid_rows': value['validRows'],
        'invalid_rows': value['invalidRows'],
        'score_range': value['scoreRange'],
        'top_models': value['topModels'],
        'schema_version': SchemaVersionToJSON(value['schemaVersion']),
    };
}


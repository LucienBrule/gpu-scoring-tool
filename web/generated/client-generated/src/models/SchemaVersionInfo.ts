/* tslint:disable */
/* eslint-disable */
/**
 * Glyphd: GPU Market API
 * API service exposing enriched GPU listingsmodel metadata, scoring reports, and insight overlays from the glyphsieve pipeline.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * DTO for schema version information endpoint.
 * 
 * Provides information about supported schema versions and their capabilities.
 * @export
 * @interface SchemaVersionInfo
 */
export interface SchemaVersionInfo {
    /**
     * List of supported schema versions
     * @type {Array<string>}
     * @memberof SchemaVersionInfo
     */
    supportedVersions: Array<string>;
    /**
     * Default schema version for new requests
     * @type {string}
     * @memberof SchemaVersionInfo
     */
    defaultVersion: string;
    /**
     * Latest available schema version
     * @type {string}
     * @memberof SchemaVersionInfo
     */
    currentVersion: string;
}

/**
 * Check if a given object implements the SchemaVersionInfo interface.
 */
export function instanceOfSchemaVersionInfo(value: object): value is SchemaVersionInfo {
    if (!('supportedVersions' in value) || value['supportedVersions'] === undefined) return false;
    if (!('defaultVersion' in value) || value['defaultVersion'] === undefined) return false;
    if (!('currentVersion' in value) || value['currentVersion'] === undefined) return false;
    return true;
}

export function SchemaVersionInfoFromJSON(json: any): SchemaVersionInfo {
    return SchemaVersionInfoFromJSONTyped(json, false);
}

export function SchemaVersionInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): SchemaVersionInfo {
    if (json == null) {
        return json;
    }
    return {
        
        'supportedVersions': json['supported_versions'],
        'defaultVersion': json['default_version'],
        'currentVersion': json['current_version'],
    };
}

export function SchemaVersionInfoToJSON(json: any): SchemaVersionInfo {
    return SchemaVersionInfoToJSONTyped(json, false);
}

export function SchemaVersionInfoToJSONTyped(value?: SchemaVersionInfo | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'supported_versions': value['supportedVersions'],
        'default_version': value['defaultVersion'],
        'current_version': value['currentVersion'],
    };
}


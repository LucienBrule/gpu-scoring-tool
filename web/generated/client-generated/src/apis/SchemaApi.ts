/* tslint:disable */
/* eslint-disable */
/**
 * Glyphd: GPU Market API
 * API service exposing enriched GPU listingsmodel metadata, scoring reports, and insight overlays from the glyphsieve pipeline.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  SchemaVersionInfo,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    SchemaVersionInfoFromJSON,
    SchemaVersionInfoToJSON,
} from '../models/index';

export interface CheckSchemaVersionApiSchemaVersionsVersionGetRequest {
    version: string;
}

/**
 * 
 */
export class SchemaApi extends runtime.BaseAPI {

    /**
     * Check if a specific schema version is supported by the API
     * Check if schema version is supported
     */
    async checkSchemaVersionApiSchemaVersionsVersionGetRaw(requestParameters: CheckSchemaVersionApiSchemaVersionsVersionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['version'] == null) {
            throw new runtime.RequiredError(
                'version',
                'Required parameter "version" was null or undefined when calling checkSchemaVersionApiSchemaVersionsVersionGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/schema/versions/{version}`;
        urlPath = urlPath.replace(`{${"version"}}`, encodeURIComponent(String(requestParameters['version'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Check if a specific schema version is supported by the API
     * Check if schema version is supported
     */
    async checkSchemaVersionApiSchemaVersionsVersionGet(requestParameters: CheckSchemaVersionApiSchemaVersionsVersionGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.checkSchemaVersionApiSchemaVersionsVersionGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve information about supported API schema versions and defaults
     * Get supported schema versions
     */
    async getSchemaVersionsApiSchemaVersionsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SchemaVersionInfo>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/schema/versions`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SchemaVersionInfoFromJSON(jsonValue));
    }

    /**
     * Retrieve information about supported API schema versions and defaults
     * Get supported schema versions
     */
    async getSchemaVersionsApiSchemaVersionsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SchemaVersionInfo> {
        const response = await this.getSchemaVersionsApiSchemaVersionsGetRaw(initOverrides);
        return await response.value();
    }

}

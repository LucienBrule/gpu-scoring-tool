/* tslint:disable */
/* eslint-disable */
/**
 * Glyphd: GPU Market API
 * API service exposing enriched GPU listingsmodel metadata, scoring reports, and insight overlays from the glyphsieve pipeline.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
} from '../models/index';

export interface GetListingDeltaApiForecastDeltasDeltaIdGetRequest {
    deltaId: number;
}

export interface GetListingDeltasApiForecastDeltasGetRequest {
    model?: string | null;
    minPriceChangePct?: number | null;
    after?: Date | null;
    region?: string | null;
    limit?: number;
}

/**
 * 
 */
export class ForecastApi extends runtime.BaseAPI {

    /**
     * Retrieve a specific delta by ID with full snapshot details
     * Get specific listing delta
     */
    async getListingDeltaApiForecastDeltasDeltaIdGetRaw(requestParameters: GetListingDeltaApiForecastDeltasDeltaIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['deltaId'] == null) {
            throw new runtime.RequiredError(
                'deltaId',
                'Required parameter "deltaId" was null or undefined when calling getListingDeltaApiForecastDeltasDeltaIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/forecast/deltas/{delta_id}`;
        urlPath = urlPath.replace(`{${"delta_id"}}`, encodeURIComponent(String(requestParameters['deltaId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Retrieve a specific delta by ID with full snapshot details
     * Get specific listing delta
     */
    async getListingDeltaApiForecastDeltasDeltaIdGet(requestParameters: GetListingDeltaApiForecastDeltasDeltaIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.getListingDeltaApiForecastDeltasDeltaIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve computed deltas between successive listing snapshots for price volatility analysis
     * Get listing price deltas
     */
    async getListingDeltasApiForecastDeltasGetRaw(requestParameters: GetListingDeltasApiForecastDeltasGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<{ [key: string]: any; }>>> {
        const queryParameters: any = {};

        if (requestParameters['model'] != null) {
            queryParameters['model'] = requestParameters['model'];
        }

        if (requestParameters['minPriceChangePct'] != null) {
            queryParameters['min_price_change_pct'] = requestParameters['minPriceChangePct'];
        }

        if (requestParameters['after'] != null) {
            queryParameters['after'] = (requestParameters['after'] as any).toISOString();
        }

        if (requestParameters['region'] != null) {
            queryParameters['region'] = requestParameters['region'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/forecast/deltas`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Retrieve computed deltas between successive listing snapshots for price volatility analysis
     * Get listing price deltas
     */
    async getListingDeltasApiForecastDeltasGet(requestParameters: GetListingDeltasApiForecastDeltasGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<{ [key: string]: any; }>> {
        const response = await this.getListingDeltasApiForecastDeltasGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

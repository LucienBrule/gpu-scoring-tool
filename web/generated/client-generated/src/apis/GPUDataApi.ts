/* tslint:disable */
/* eslint-disable */
/**
 * GlyphD API
 * API for GPU scoring and market analysis
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GPUListingDTO,
  GPUModelDTO,
  HTTPValidationError,
} from '../models/index';
import {
    GPUListingDTOFromJSON,
    GPUListingDTOToJSON,
    GPUModelDTOFromJSON,
    GPUModelDTOToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
} from '../models/index';

export interface GetListingsApiListingsGetRequest {
    model?: string | null;
    quantized?: boolean | null;
}

/**
 * 
 */
export class GPUDataApi extends runtime.BaseAPI {

    /**
     * Get all GPU listings with optional filtering.  Args:     model: Optional filter by exact model name     quantized: Optional filter by quantization capability     listings: List of GPU listings from dependency injection  Returns:     List[GPUListingDTO]: A list of GPU listings.
     * Get Listings
     */
    async getListingsApiListingsGetRaw(requestParameters: GetListingsApiListingsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GPUListingDTO>>> {
        const queryParameters: any = {};

        if (requestParameters['model'] != null) {
            queryParameters['model'] = requestParameters['model'];
        }

        if (requestParameters['quantized'] != null) {
            queryParameters['quantized'] = requestParameters['quantized'];
        }

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/listings`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GPUListingDTOFromJSON));
    }

    /**
     * Get all GPU listings with optional filtering.  Args:     model: Optional filter by exact model name     quantized: Optional filter by quantization capability     listings: List of GPU listings from dependency injection  Returns:     List[GPUListingDTO]: A list of GPU listings.
     * Get Listings
     */
    async getListingsApiListingsGet(requestParameters: GetListingsApiListingsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GPUListingDTO>> {
        const response = await this.getListingsApiListingsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all GPU model metadata.  Args:     models: List of GPU models from dependency injection  Returns:     List[GPUModelDTO]: A list of GPU models with their metadata.
     * Get Models
     */
    async getModelsApiModelsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GPUModelDTO>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/api/models`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GPUModelDTOFromJSON));
    }

    /**
     * Get all GPU model metadata.  Args:     models: List of GPU models from dependency injection  Returns:     List[GPUModelDTO]: A list of GPU models with their metadata.
     * Get Models
     */
    async getModelsApiModelsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GPUModelDTO>> {
        const response = await this.getModelsApiModelsGetRaw(initOverrides);
        return await response.value();
    }

}
